[tool.poetry]
name = "{{ cookiecutter.project_name }}"
version = "0.1.0"
description = ""
authors = ["Your Name <you@example.com>"]
packages = [
    { include = "app" },
]

[tool.poetry.dependencies]
python = "^3.11"
fastapi = "^0.92.0"
uvicorn = "^0.20.0"
gunicorn = "^20.1.0"

[tool.poetry.group.dev.dependencies]
autoflake = "^2.0.1"
bandit = "^1.7.4"
black = "^23.1.0"
isort = "^5.12.0"
mypy = "^0.991"
ruff = "^0.0.247"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.autoflake]
check = true

[tool.black]
line-length = 88
target-version = ['py311']
exclude = '''
/(
    \.git
  | \.mypy_cache
  | \.ruff_cache
  | \.venv
  | scripts
  | tests
)/
'''

[tool.mypy]
python_version = "3.11"
warn_no_return = true
warn_unreachable = true
warn_incomplete_stub = true
warn_unused_configs = true

[tool.isort]
profile = "black"
line_length = 88
combine_as_imports = true
skip_gitignore = true
skip = [
    ".git",
    ".mypy_cache",
    ".ruff_cache",
    ".venv",
    "scripts",
    "tests",
]

[tool.ruff]
ignore-init-module-imports = true
line-length = 88
target-version = "py311"
select = [
    "F",   # pyflakes
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "N",   # pep8-naming
    "UP",  # pyupgrade
    "YTT", # flake8-2020
    "ANN", # flake8-annotations
    "FBT", # flake8-boolean-trap
    "S",   # flake8-bandit
    "B",   # flake8-bugbear
    "A",   # flake8-builtins
    "C4",  # flake8-comprehensions
    "T10", # flake8-debugger
    "EM",  # flake8-errmsg
    "EXE", # flake8-executable
    "ISC", # flake8-implicit-str-concat
    "ICN", # flake8-import-conventions
    "PIE", # flake8-pie
    "T20", # flake8-print
    "PYI", # flake8-pyi
    "PT",  # flake8-pytest-style
    "Q",   # flake8-quotes
    "RSE", # flake8-raise
    "SLF", # flake8-self
    "SIM", # flake8-simplify
    "TID", # flake8-tidy-imports
    "ARG", # flake8-unused-arguments
    "PTH", # flake8-use-pathlib
    "PGH", # pygrep-hooks
    "PLC", # pylint convention
    "PLE", # pylint error
    "PLR", # pylint refactor
    "PLW", # pylint warning
    "TRY", # tryceratops
    "RUF", # Ruff-specific rules
]
ignore = [
    "E999",    # SyntaxError
    "ANN102",  # Missing type annotation for `cls` in classmethod
    "ANN206",  # Missing return type annotation for classmethod `__subclasshook__`
    "ANN401",  # Dynamically typed expressions (typing.Any) are disallowed in `func`
    "A003",    # Class attribute `class` is shadowing a python builtin
    "PLR0912", # Too many branches
    "TRY400",  # Use logging.exception instead of logging.error
    "PTH123",  # open("foo") should be replaced by Path("foo").open()
    "RUF001",  # String contains ambiguous unicode character
]
exclude = [
    ".git",
    ".mypy_cache",
    ".ruff_cache",
    ".venv",
    "scripts",
    "tests",
]
